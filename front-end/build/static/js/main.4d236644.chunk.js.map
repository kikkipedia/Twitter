{"version":3,"sources":["components/Login.js","Navigation.js","components/Tweets.js","components/Profile.js","components/Signup.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","componentDidMount","fetch","then","res","json","setState","users","handleLogin","e","console","log","state","preventDefault","user","username","password","id","passwordInput","handleSuccessfulAuth","bind","data","this","history","push","Container","Row","Col","Card","className","Header","Body","Form","Group","as","Label","Control","required","autoComplete","type","name","value","onChange","target","placeholder","Footer","style","Button","size","variant","onClick","React","Component","Navigation","loggedIn","Navbar","bg","Brand","href","Nav","Link","inline","Tweets","loggedInStatus","Profile","handleUpdate","method","headers","Accept","body","JSON","stringify","bio","rows","maxLength","Signup","handleSend","response","onSubmit","Home","App","loggedInUser","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d236644.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,Form,Button,Col, Row, Container} from \"react-bootstrap\"\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSuccessfulAuth = this.handleSuccessfulAuth.bind(this)\r\n        this.state = {\r\n            users: [],\r\n            username: \"\",\r\n            password: \"\",\r\n            id: \"\",\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        fetch(\"http://localhost:8080/users/all\")\r\n        .then(res => res.json())\r\n        .then((res) => {\r\n            this.setState ({ users: res })\r\n        })\r\n    }\r\n\r\n    handleSuccessfulAuth(data) {\r\n        //TODO update parent component app.js\r\n        this.props.history.push(\"/tweets\") //after login success\r\n    }\r\n\r\n\r\n\r\n    // function(s) that serarches users for correct and matches password\r\n    handleLogin = (e) => {\r\n        console.log(this.state.users)\r\n        e.preventDefault()\r\n        var user = this.state.users[0].username\r\n        var password = this.state.users[0].password\r\n        var id = this.state.users[0].id\r\n        var username = this.state.username\r\n        var passwordInput = this.state.password\r\n        this.setState({id: this.state.users[0].id})\r\n        if (username === \"\" && passwordInput === \"\") {\r\n            console.log(\"error\")\r\n            \r\n        }\r\n        else if (user === username && passwordInput === password) {\r\n            console.log (\"Login success: \" + user, password, id)\r\n            //this.props.handleSuccessfulAuth(user.data)\r\n        }\r\n        else {\r\n            console.log(\"Username/password not valid\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return(\r\n            <div>\r\n        <Container>\r\n          <Row>\r\n            <Col></Col>\r\n            <Col>\r\n            <br/>\r\n            <br/>\r\n            <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header><h3>Login</h3></Card.Header>\r\n                    <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as= {Col}>\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    id = \"username\"\r\n                                    name = \"username\"\r\n                                    value={this.state.value}\r\n                                    onChange= {e => this.setState({username: e.target.value})}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Username\" />\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    id = \"password\"\r\n                                    name = \"password\"\r\n                                    value={this.state.value}\r\n                                    onChange= {e => this.setState({password: e.target.value})}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Password\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                                <Button size=\"sm\" variant=\"primary\" onClick={this.handleLogin}>Login</Button>\r\n                            </Card.Footer>\r\n                        </Card.Body>\r\n                    \r\n                </Card>\r\n            \r\n            </Col>\r\n            <Col></Col>\r\n          </Row>\r\n          </Container>\r\n            \r\n            </div>\r\n    \r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {Navbar, Nav, Form} from \"react-bootstrap\"\r\n\r\nexport default class Navigation extends React.Component {\r\n    constructor(){\r\n        super() \r\n        this.state = {\r\n            loggedIn: false\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"/\">FakeTwitter</Navbar.Brand>\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/profile\">Profile</Nav.Link>\r\n                    <Nav.Link href=\"/tweets\">Tweet</Nav.Link>\r\n                </Nav>\r\n                <Form inline>\r\n                    <Nav.Link href=\"/login\">Sign in</Nav.Link>\r\n                </Form>\r\n            </Navbar>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nconst Tweets = props => {\r\n   \r\n\r\n        return(\r\n            <div>\r\n                <h2>Tweets</h2>\r\n                Satus: {props.loggedInStatus}\r\n                <br/>\r\n                \r\n            </div>\r\n        )\r\n}\r\nexport default Tweets","import React from 'react'\r\nimport {Form, Button, Col, Row, Container} from \"react-bootstrap\"\r\n\r\nexport default class Profile extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: \"\",\r\n            user: [],\r\n            username: \"\",\r\n            bio: \"\"\r\n        }\r\n    }\r\n    // user id as props from login\r\n    // hämta user info och möjliggör edit\r\n/*     componentDidMount(props){\r\n        // id från login\r\n        console.log(\"id: \",this.props.location.state.id)\r\n        this.setState ({id: this.props.location.state.id})\r\n        fetch(\"http://localhost:8080/users/all\")\r\n        .then(res => res.json())\r\n        .then((result) => {\r\n            for(var i = 0; i < result.length; i++) {\r\n                if(result[i].id === this.state.id) {\r\n                    this.setState ({user: result[i]})\r\n                }\r\n            }\r\n            console.log(this.state.user)\r\n        })\r\n    } */\r\n\r\n    handleUpdate = () => {\r\n        fetch(\"http://localhost:8080/users/all/\" + this.state.id, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Accept: \"application/json\", \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                bio: this.state.bio,\r\n                username: this.state.user.username,\r\n                password: this.state.user.password\r\n            })\r\n        })\r\n        console.log(\"Updated: \" + this.state.bio)\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                      <Col></Col>\r\n                      <Col>\r\n                        <h2>hej {this.state.user.username}</h2>\r\n                        <p>Change bio:</p>\r\n                        <p>(max 255 characters)</p>\r\n                        <Form>\r\n                            <Form.Group as= {Col}>\r\n                                <Form.Control required autoComplete=\"off\"\r\n                                    as=\"textarea\"\r\n                                    rows=\"10\"\r\n                                    id = \"bio\"\r\n                                    name = \"bio\"\r\n                                    value={this.state.bio}\r\n                                    onChange= {e => this.setState({bio: e.target.value})}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    maxLength={255}\r\n                                    placeholder= {this.state.user.bio} />\r\n                                    \r\n                            </Form.Group>\r\n                            <Button onClick={this.handleUpdate}>Update</Button>\r\n                        </Form>\r\n                      </Col>\r\n                      <Col></Col>  \r\n                    </Row>\r\n                </Container>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {Card,Form,Button,Col, Container, Row} from \"react-bootstrap\"\r\n\r\nexport default class Signup extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n    \r\n    handleSend = () => {\r\n        fetch(\"http://localhost:8080/users/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\", \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            })   \r\n        })\r\n        .then((response) => response.json())\r\n        .then(response => {\r\n            //TODO: if-registration = success:\r\n            console.log(\"response: \" + response.data)\r\n            this.props.handleSuccessfulAuth(response.data)\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <br/>\r\n                <Container>\r\n                    <Row>\r\n                <Col></Col>\r\n                <Col>\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header><h3>Register</h3></Card.Header>\r\n                    <Form onSubmit={this.handleSend}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as= {Col}>\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    value={this.state.username}\r\n                                    onChange= {e => this.setState({username: e.target.value})}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Username\" />\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    value={this.state.password}\r\n                                    onChange= {e => this.setState({password: e.target.value})}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Password\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                                <Button size=\"sm\" variant=\"primary\" onClick={this.handleSend}>Submit</Button>\r\n                            </Card.Footer>\r\n                        </Card.Body>\r\n                    </Form>\r\n                </Card></Col>\r\n                <Col></Col>\r\n                </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react'\r\nimport Signup from './Signup'\r\nimport Login from './Login'\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSuccessfulAuth = this.handleSuccessfulAuth.bind(this)\r\n    }\r\n\r\n    handleSuccessfulAuth(data) {\r\n        this.props.handleLogin(data) \r\n        this.props.history.push(\"/tweets\")\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h2>welcome to fakeTwitter</h2>\r\n                <p>Status: {this.props.loggedInStatus}</p>\r\n                <Signup handleSuccessfulAuth={this.handleSuccessfulAuth} />\r\n                <br/>\r\n                <Login handleSuccessfulAuth={this.handleSuccessfulAuth} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n//import Signup from './components/Signup'\nimport Login from './components/Login'\nimport Navigation from './Navigation'\nimport Tweets from './components/Tweets'\nimport Profile from './components/Profile'\nimport Signup from './components/Signup'\nimport Home from './components/Home'\n//import ProtectedRoutes from './components/ProtectedRoutes'\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      loggedInStatus: \"Not_logged_in\",\n      loggedInUser: {}\n    }\n    this.handleLogin = this.handleLogin.bind(this)\n  }\n\n  handleLogin(data) {\n    this.setState({\n      loggedInStatus: \"Logged_in!\",\n      loggedInUser: data\n    })\n  }\n\n  render() {\n\n    return (\n    \n      <div className=\"App\">\n        <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\" render = {props => (\n            <Home {...props} handleLogin={this.handleLogin} loggedInStatus={this.state.loggedInStatus}/>\n          )}/>\n          <Route exact path=\"/profile\" render={props => (\n            <Profile {...props} loggedInStatus={this.state.loggedInStatus} />\n          )}/>\n          <Route exact path=\"/tweets\" render={props => (\n            <Tweets {...props} loggedInStatus={this.state.loggedInStatus} />\n          )}/>\n          <Route exact path=\"/login\" render={props => (\n            <Login {...props} loggedInStatus={this.state.loggedInStatus} />\n          )}/>\n        </Switch>\n      </Router>\n\n        \n      </div>\n      \n      \n    )\n\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}