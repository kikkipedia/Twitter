{"version":3,"sources":["context/AuthContext.js","components/PrivateRoute.js","components/Login.js","Navigation.js","components/Tweets.js","components/Profile.js","components/Signup.js","components/Home.js","components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["authContext","createContext","AuthProvider","children","useState","loading","data","auth","setAuth","useEffect","JSON","parse","window","localStorage","getItem","setItem","stringify","Provider","value","setAuthData","PrivateRoute","Component","component","rest","useContext","render","routeProps","to","Login","username","setUsername","setPassword","history","useHistory","Container","Row","Col","Card","className","Header","Body","Form","Group","as","Label","Control","required","autoComplete","type","id","name","onChange","e","target","placeholder","Footer","style","Button","size","variant","onClick","preventDefault","fetch","then","res","json","console","log","user","find","el","undefined","replace","Navigation","state","loggedIn","Navbar","bg","Brand","href","Nav","Link","inline","React","Tweets","props","Profile","setTweet","Signup","password","handleSend","method","headers","Accept","body","response","catch","error","onSubmit","Home","HomePage","App","exact","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2a4061d0.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const authContext = createContext({})\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [auth, setAuth] = useState({ loading: true, data: null })\r\n\r\n  const setAuthData = (data) => {\r\n    setAuth({data: data});\r\n  }\r\n //will add the user data in the auth;\r\n\r\n useEffect(() => {\r\n    setAuth({ loading: false, data: JSON.parse(window.localStorage.getItem('authData'))});\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('authData', JSON.stringify(auth.data));\r\n  }, [auth.data])\r\n\r\n  return (\r\n    <authContext.Provider value={{ auth, setAuthData }}>\r\n      {children}\r\n    </authContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider","import React, {useContext} from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport {authContext} from '../context/AuthContext'\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n\r\n    const {auth} = useContext(authContext)\r\n    const {loading} = auth\r\n\r\n    if(loading) {\r\n        return(\r\n            <Route {...rest} render={() => {\r\n                return <p>Loading...</p>\r\n            }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Route {...rest}\r\n            render={(routeProps) => (\r\n                auth.data ? <Component {...routeProps} /> \r\n                : \r\n                <Redirect to=\"/login\" />\r\n            )}\r\n        />\r\n    )\r\n}\r\nexport default PrivateRoute","import React, {useState, useContext} from 'react'\r\nimport {Card,Form,Button,Col, Row, Container} from \"react-bootstrap\"\r\nimport {authContext} from '../context/AuthContext'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState()\r\n    const [password, setPassword] = useState()\r\n    const {setAuthData} = useContext(authContext)\r\n    const history = useHistory()\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault()\r\n        fetch(\"https://6z4gbjcjfl.execute-api.eu-north-1.amazonaws.com/default/node-api/users/all\")\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            var user = data.find(el => el.username === username)\r\n            if (user === undefined) {\r\n                console.log(\"error\")\r\n            }\r\n            else {\r\n                console.log(user)\r\n                setAuthData(user)\r\n                history.replace(\"/\")\r\n            }    \r\n        })            \r\n    }\r\n\r\n\r\n        return(\r\n            <div>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n\r\n            <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header><h3>Login</h3></Card.Header>\r\n                    <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as= {Col}>\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    id = \"username\"\r\n                                    name = \"username\"\r\n                                    onChange= {e => setUsername(e.target.value)}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Username\" />\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    id = \"password\"\r\n                                    name = \"password\"\r\n                                    onChange= {e => setPassword(e.target.value)}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Password\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                                <Button size=\"sm\" variant=\"primary\" onClick={handleLogin}>Login</Button>\r\n                            </Card.Footer>\r\n                        </Card.Body>    \r\n                </Card>    \r\n            </Col>\r\n          </Row>\r\n          </Container>\r\n            \r\n            </div>\r\n    \r\n        )\r\n    }\r\nexport default Login","import React from 'react'\r\nimport {Navbar, Nav, Form} from \"react-bootstrap\"\r\n\r\nexport default class Navigation extends React.Component {\r\n    constructor(){\r\n        super() \r\n        this.state = {\r\n            loggedIn: false\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"/\">FakeTwitter</Navbar.Brand>\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/profile\">Profile</Nav.Link>\r\n                    <Nav.Link href=\"/tweets\">Tweet</Nav.Link>\r\n                </Nav>\r\n                <Form inline>\r\n                    <Nav.Link href=\"/login\">Sign in</Nav.Link>\r\n                </Form>\r\n            </Navbar>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nconst Tweets = props => {\r\n   \r\n\r\n        return(\r\n            <div>\r\n                <h2>Tweets</h2>\r\n                \r\n                <br/>\r\n                \r\n            </div>\r\n        )\r\n}\r\nexport default Tweets","import React, {useState, useContext} from 'react'\r\nimport {Form, Button, Col, Card} from \"react-bootstrap\"\r\nimport {authContext} from '../context/AuthContext'\r\n\r\nconst Profile = () => {\r\n\r\n    const [tweet, setTweet] = useState()\r\n    const {auth} = useContext(authContext)\r\n\r\n    const submitTweet = (e) => {\r\n        e.preventDefault()\r\n        fetch(\"https://6z4gbjcjfl.execute-api.eu-north-1.amazonaws.com/default/node-api/users/\" + auth.data.id)\r\n        .then(res => res.json())\r\n        .then(data => console.log(data))\r\n    }\r\n\r\n\r\n        return(\r\n            <div>\r\n                <Card>\r\n                    <Form.Row>\r\n                        <Form.Group as= {Col}>\r\n                           <Form.Label>Send a tweet:</Form.Label>\r\n                           <Form.Control required autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                id = \"bio\"\r\n                                name = \"bio\"\r\n                                value=\"\"\r\n                                onChange= {e => setTweet(e.target.value)}\r\n                                className={\"bg-dark text-white\"}\r\n                                placeholder= \"\" />\r\n                            <Button onClick={submitTweet}>Tweet!</Button>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\nexport default Profile","import React, {useState, useContext} from 'react'\r\nimport {Card,Form,Button,Col, Container, Row} from \"react-bootstrap\"\r\nimport {authContext} from '../context/AuthContext'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst Signup = () => {\r\n\r\n    const [username, setUsername] = useState()\r\n    const [password, setPassword] = useState()\r\n    const {setAuthData} = useContext(authContext)\r\n    const history = useHistory()\r\n\r\n    \r\n    const handleSend = () => {\r\n        fetch(\"https://6z4gbjcjfl.execute-api.eu-north-1.amazonaws.com/default/node-api/users/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\", \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            })   \r\n        })\r\n        .then((response) => response.json())\r\n        .then(res => {\r\n            console.log(\"success\")\r\n            setAuthData(username)\r\n            history.replace(\"/\")\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                <Col>\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header><h3>Register</h3></Card.Header>\r\n                    <Form onSubmit={handleSend}>\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as= {Col}>\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    onChange= {e => setUsername(e.target.value)}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Username\" />\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                    type=\"text\"\r\n                                    onChange= {e => setPassword(e.target.value)}\r\n                                    className={\"bg-dark text-white\"}\r\n                                    placeholder= \"Password\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                                <Button size=\"sm\" variant=\"primary\" onClick={handleSend}>Submit</Button>\r\n                            </Card.Footer>\r\n                        </Card.Body>\r\n                    </Form>\r\n                </Card></Col>\r\n                </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\nexport default Signup","import React from 'react'\r\nimport Signup from './Signup'\r\nimport Login from './Login'\r\n\r\nconst Home = () => {\r\n\r\n\r\n        return(\r\n            <div className=\"text-center\">\r\n                <h2>welcome to fakeTwitter</h2>\r\n                \r\n                    <Signup />\r\n                    <Login  />                \r\n            </div>\r\n        )\r\n    }\r\nexport default Home","import React, { useContext } from 'react'\r\nimport {Button,Col, Row, Container} from \"react-bootstrap\"\r\nimport { authContext } from '../context/AuthContext'\r\nimport Profile from './Profile'\r\nimport Tweets from './Tweets'\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n    const {setAuthData, auth} = useContext(authContext)\r\n\r\n    const onLogOut = () => {\r\n        setAuthData(null)\r\n    }\r\n\r\n        return(\r\n            <>\r\n            <Row>\r\n                <Col>\r\n                    <Container>\r\n                        <h2 className=\"text-center\">{`Welcome ${auth.data.username}`} </h2>\r\n                        <Profile/>\r\n                        <Button onClick={onLogOut}>Logout</Button>\r\n                    </Container>\r\n                    </Col>\r\n                <Col>\r\n                Twitterfeed\r\n                    <Container>\r\n                        <Tweets/>\r\n                    </Container>\r\n                    </Col>\r\n            </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default HomePage","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\nimport PrivateRoute from './components/PrivateRoute'\nimport Login from './components/Login'\nimport Navigation from './Navigation'\nimport Tweets from './components/Tweets'\nimport Profile from './components/Profile'\nimport Home from './components/Home'\nimport HomePage from './components/HomePage'\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      user: null\n    }\n    \n  }\n\n  render() {\n\n    return (\n    \n      <div className=\"App\">\n        <Router>\n        <Navigation />\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={HomePage}/>\n          <Route exact path=\"/login\" component={Home}/>\n        </Switch>\n      </Router>\n\n        \n      </div>\n      \n      \n    )\n\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AuthProvider from './context/AuthContext'\n\nReactDOM.render(\n   (\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n   ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}